"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.patchPackageJSONWithVersion = exports.generateConfigForVersion = exports.prepareHeaders = void 0;
var fs_1 = require("fs");
var download_1 = require("./download");
var path_1 = require("path");
var config_1 = require("./config");
function copyHeadersRecursively(srcPath, targetPath) {
    for (var _i = 0, _a = fs_1.readdirSync(srcPath); _i < _a.length; _i++) {
        var part = _a[_i];
        var path = path_1.join(srcPath, part);
        var target = path_1.join(targetPath, part);
        if (fs_1.lstatSync(path).isDirectory()) {
            copyHeadersRecursively(path, target);
            continue;
        }
        if (path_1.extname(path) === '.h') {
            download_1.copyFile(path, target);
        }
    }
}
function prepareHeaders() {
    var incDir = './inc';
    if (!fs_1.existsSync(incDir)) {
        fs_1.mkdirSync(incDir);
    }
    var rootPath = '../..';
    var cApiPath = 'catboost/libs/model_interface/c_api.h';
    download_1.copyFile(path_1.join(rootPath, cApiPath), path_1.join(incDir, cApiPath));
    var stlfwdPath = 'contrib/libs/cxxsupp/system_stl/include/stlfwd';
    download_1.copyFile(path_1.join(rootPath, stlfwdPath), path_1.join(incDir, stlfwdPath));
    var utilPath = 'util';
    copyHeadersRecursively(path_1.join(rootPath, utilPath), path_1.join(incDir, utilPath));
}
exports.prepareHeaders = prepareHeaders;
function generateConfigForVersion(version) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, config, error;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    console.log("Preparing config for verion " + version);
                    return [4 /*yield*/, config_1.createConfigForVersion(version)];
                case 1:
                    _a = _b.sent(), config = _a[0], error = _a[1];
                    config_1.writeConfig(config);
                    if (error !== undefined) {
                        throw error;
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.generateConfigForVersion = generateConfigForVersion;
function patchPackageJSONWithVersion(version) {
    var pkg = fs_1.readFileSync('./package.json', 'utf8');
    var packageObj = JSON.parse(pkg);
    packageObj['version'] = version;
    fs_1.writeFileSync('./package.json', JSON.stringify(packageObj, null, 2));
}
exports.patchPackageJSONWithVersion = patchPackageJSONWithVersion;
