"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildLocal = exports.buildYa = exports.buildModel = exports.compileBindings = exports.compileJs = void 0;
var common_1 = require("./common");
var fs_1 = require("fs");
var download_1 = require("./download");
var config_1 = require("./config");
function compileTypeScript() {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, common_1.execProcess('npm run tsc')];
                case 1:
                    result = _b.sent();
                    if (result.code !== 0) {
                        console.error("Building ts library failed: \n            " + result.code + " " + result.signal + " " + ((_a = result.err) === null || _a === void 0 ? void 0 : _a.message));
                        process.exit(1);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
function copyBindings() {
    fs_1.writeFileSync('./lib/catboost.d.ts', fs_1.readFileSync('./bindings/catboost.d.ts'));
    fs_1.writeFileSync('./lib/catboost.js', fs_1.readFileSync('./bindings/catboost.js'));
}
function compileNativeAddon(srcPath) {
    var _a;
    if (srcPath === void 0) { srcPath = '../..'; }
    return __awaiter(this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    process.env['CATBOOST_SRC_PATH'] = srcPath;
                    return [4 /*yield*/, common_1.execProcess('node-gyp build')];
                case 1:
                    result = _b.sent();
                    if (result.code !== 0) {
                        console.error("Building native-addon library failed: \n            " + result.code + " " + result.signal + " " + ((_a = result.err) === null || _a === void 0 ? void 0 : _a.message));
                        process.exit(1);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
function compileJs() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, compileTypeScript()];
                case 1:
                    _a.sent();
                    copyBindings();
                    return [2 /*return*/];
            }
        });
    });
}
exports.compileJs = compileJs;
function compileBindings() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, compileJs()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, compileNativeAddon()];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.compileBindings = compileBindings;
function buildModelInterfaceLibrary() {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var srcPath, result;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    srcPath = process.env['CATBOOST_SRC_PATH'] || '../..';
                    return [4 /*yield*/, common_1.execProcess(srcPath + "/ya make -r " + srcPath + "/catboost/libs/model_interface -o ./build")];
                case 1:
                    result = _b.sent();
                    if (result.code !== 0) {
                        console.error("Building catboostmodel library failed: \n            " + result.code + " " + result.signal + " " + ((_a = result.err) === null || _a === void 0 ? void 0 : _a.message));
                        process.exit(1);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
function configureGyp(srcPath) {
    var _a;
    if (srcPath === void 0) { srcPath = '../..'; }
    return __awaiter(this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    process.env['CATBOOST_SRC_PATH'] = srcPath;
                    return [4 /*yield*/, common_1.execProcess('node-gyp configure')];
                case 1:
                    result = _b.sent();
                    if (result.code !== 0) {
                        console.error("Node-gyp configuration failed: \n            " + result.code + " " + result.signal + " " + ((_a = result.err) === null || _a === void 0 ? void 0 : _a.message));
                        process.exit(1);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
function buildModel() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, configureGyp()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, buildModelInterfaceLibrary()];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.buildModel = buildModel;
/** Build binary from repository. */
function buildYa() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, configureGyp()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, buildModelInterfaceLibrary()];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, compileBindings()];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.buildYa = buildYa;
function preparePlatformBinary(platform) {
    return __awaiter(this, void 0, void 0, function () {
        var config, _a, _i, _b, binary, _c, _d, binary, _e, _f, binary;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    config = config_1.readConfig();
                    _a = platform;
                    switch (_a) {
                        case 'linux': return [3 /*break*/, 1];
                        case 'darwin': return [3 /*break*/, 6];
                        case 'win32': return [3 /*break*/, 11];
                    }
                    return [3 /*break*/, 16];
                case 1:
                    _i = 0, _b = config.binaries['linux'];
                    _g.label = 2;
                case 2:
                    if (!(_i < _b.length)) return [3 /*break*/, 5];
                    binary = _b[_i];
                    return [4 /*yield*/, download_1.downloadBinaryFile('./build/catboost/libs/model_interface', binary)];
                case 3:
                    _g.sent();
                    _g.label = 4;
                case 4:
                    _i++;
                    return [3 /*break*/, 2];
                case 5:
                    fs_1.linkSync('./build/catboost/libs/model_interface/libcatboostmodel.so', './build/catboost/libs/model_interface/libcatboostmodel.so.1');
                    return [2 /*return*/];
                case 6:
                    _c = 0, _d = config.binaries['mac'];
                    _g.label = 7;
                case 7:
                    if (!(_c < _d.length)) return [3 /*break*/, 10];
                    binary = _d[_c];
                    return [4 /*yield*/, download_1.downloadBinaryFile('./build/catboost/libs/model_interface', binary)];
                case 8:
                    _g.sent();
                    _g.label = 9;
                case 9:
                    _c++;
                    return [3 /*break*/, 7];
                case 10: return [2 /*return*/];
                case 11:
                    _e = 0, _f = config.binaries['win'];
                    _g.label = 12;
                case 12:
                    if (!(_e < _f.length)) return [3 /*break*/, 15];
                    binary = _f[_e];
                    return [4 /*yield*/, download_1.downloadBinaryFile('./build/catboost/libs/model_interface', binary)];
                case 13:
                    _g.sent();
                    _g.label = 14;
                case 14:
                    _e++;
                    return [3 /*break*/, 12];
                case 15: return [2 /*return*/];
                case 16: throw new Error("Platform " + platform + " is not supported");
            }
        });
    });
}
function buildLocal(platform) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, preparePlatformBinary(platform)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, configureGyp('./inc')];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, compileNativeAddon('./inc')];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.buildLocal = buildLocal;
